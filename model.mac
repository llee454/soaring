/*
  This model was created to determine whether or not certain
  sailplane models are statistically safer (or less safe) than
  others.

  Certain models, such as the CA-4, have experienced very high
  loss rates in fatal accidents; whereas other models, such as
  the ASK-21s, have experienced relatively few hull losses in
  fatal accidents.

  Unfortunately, no organization appears to be maintaining an
  accurate count of the number of sailplanes in active use let
  alone the number of flight hours logged on each model.

  Instead, all we have are the flight hours accumulated by aircraft
  that have been destroyed in accidents reported to the NTSB.
*/

load (draw);
load (eigen);
load (descriptive);
load (solve_rec);

ratprint: false;

/*
  Accepts two arguments: pr and pa, the rate at which gliders are
  retired and destroyed by accidents respectively; and returns the
  operator matrix that simulates the effects of one year on a cohort
  of gliders.
*/
simMatrix (pr, pa)
  := matrix ([1 - pr - pa, 0], [pa, 1]);

/*
  Accepts two arguments: pr and pa, the rate at which gliders are
  retired and destroyed by accidents respectively; and returns the
  eigenvectors matrix associated with the simulation matrix.
*/
simMatrixEigenvecs (pr, pa)
  := matrix ([1, 0], [- pa/(pr + pa), 1]); 

/*
  Accepts two arguments: pr and pa, the rate at which gliders are
  retired and destroyed by accidents respectively; and returns the
  eigenvalues matrix associated with the simulation matrix.
*/
simMatrixEigenvals (pr, pa, n)
  := matrix ([(1 - pr - pa)^n, 0], [0, 1]);

/*
  Accepts four arguments:

  * km, the initial number of gliders in the cohort (the number of
    gliders manufactured each year)
  * pr, the probability that a glider will be retired each year
  * pa, the probability that a glider will be destroyed in an
    accident each year
  * n, a number of years

  and returns a vector of the form [numGliders, numAccidents],
  where numGliders represents the number of gliders remaining in the
  cohort and numAccidents denotes the number of gliders destroyed
  in accidents.
*/
sim (km, pr, pa, n)
  := block
       ([T, M],
        T : simMatrixEigenvecs (pr, pa),
        M : simMatrixEigenvals (pr, pa, n),
        T . M . (T ^^ -1) . columnvector ([km, 0]));

/*
  Accepts four arguments:

  * km, the initial number of gliders in the cohort (the number of
    gliders manufactured each year)
  * pr, the probability that a glider will be retired each year
  * pa, the probability that a glider will be destroyed in an
    accident each year
  * n, a number of years

  and returns the number of gliders remaining in the cohort after
  n years.
*/
cohortNumGlidersN (km, pr, pa, n)
  := sim (km, pr, pa, n)[1][1];

/*
  Accepts four arguments:

  * km, the initial number of gliders in the cohort (the number of
    gliders manufactured each year)
  * pr, the probability that a glider will be retired each year
  * pa, the probability that a glider will be destroyed in an
    accident each year
  * n, a number of years

  and returns the number of gliders destroyed by accidents after
  n years.
*/
cohortNumAccidentsN (km, pr, pa, n)
  := sim (km, pr, pa, n)[2][1];

/*
  Accepts four arguments:

  * km, the initial number of gliders in the cohort (the number of
    gliders manufactured each year)
  * kr, the rate at which gliders are retired
  * ka, the rate at which gliders are destroyed in accidents
    accident each year
  * t, a number of years

  and returns the number of gliders remaining in the cohort after
  t years.

         - (kr + ka) t
    km %e
*/
cohortNumGliders (km, kr, ka, t)
  := limit (cohortNumGlidersN (km, kr / a, ka / a, t * a), a, inf);

/*
  Accepts four arguments:

  * km, the initial number of gliders in the cohort (the number of
    gliders manufactured each year)
  * kr, the rate at which gliders are retired
  * ka, the rate at which gliders are destroyed in accidents
    accident each year
  * t, a number of years

  and returns the number of gliders destroyed in accidents after
  t years.

   ka km         - (kr + ka) t
  ------- (1 - %e             )
  kr + ka
*/
cohortNumAccidents (km, kr, ka, t)
  := limit (cohortNumAccidentsN (km, kr / a, ka / a, t * a), a, inf);

/*
  Accepts one argument: ka, an accident rate; and returns the
  equivalent probability that a glider will be destroyed by an
  accident in a given year.

  see:
    solve
      (cohortNumGlidersN (km, 0, pa, t) =
       cohortNumGliders (km, 0, ka, t), pa);
*/
accidentProb (ka)
  := 1 - %e^(- ka);

/*
/*
minAge (manEnd, t) := max (0, t - manEnd);
maxAge (manStart, t) := max (0, t - manStart);

numAccidents (manStart, manEnd, manRate, kr, ka, t)
  := integrate
       (ev (H, km = manRate, ka = ka, kr = kr),
        t, minAge (manEnd, t), maxAge (manStart, t));

numAccidentsByCohortAge (manRate, kr, ka, age)
  := block
       ([M],
        M : accidentMatrix (kr, ka),
        (M ^^ age) . columnvector ([manRate, 0]));
*/
numGlidersAgeEqnN
  : rhs (solve_rec (f [n] = f [n - 1] * (1 - kr - ka), f [n], f [0] = manRate));

numGlidersAgeEqnC
  : limit
      (subst
        ([
          kr   = kr / a,
          ka = ka / a,
          n            = age * a
         ],
         numGlidersAgeEqnN),
       a, inf);

/*
  Accepts three arguments:

  * manRate, a real number that represents the rate at which gliders
    are manufactured;
  * kr, a real number that represents the rate at which
    gliders are retired or destroyed in accidents;
  * and age, a real number that represents a number of years

  and returns the number of active gliders that have age age.

              - (kr + ka) age
    manRate %e
*/

getNumGlidersAge (manRate, kr, ka, age)
  := ev (numGlidersAgeEqnC);

numGlidersEqnN
  : rhs (solve_rec (f [n] = f [n - 1]*(1 - kr - ka) + manRate, f [n], f [0] = 0));

numGlidersEqnC
  : limit
      (subst
        ([
          manRate      = manRate / a,
          kr   = kr / a,
          ka = ka / a,
          n            = t * a
         ],
         numGlidersEqnN),
       a, inf);

frameShift (manEnd, t) := max (0, t - manEnd);

frameLen (manStart, manEnd, t) := min (manEnd - manStart, t - manStart);

/*
  Accepts three arguments:

  * manRate, a real number that represents the rate at which gliders
    are manufactured;
  * kr, a real number that represents the rate at which
    gliders are retired or destroyed in accidents;
  * and t, a real number that represents a number of years

  and returns the number of gliders that are active after t years.

            manRate                  - (kr + ka) t
    ------------------------- (1 - %e                               )
    kr + ka
*/
getNumGliders (manStart, manEnd, manRate, kr, ka, t)
  := integrate (getNumGlidersAge (manRate, kr, ka, u + frameShift (manEnd, t)), u, 0, frameLen (manStart, manEnd, t));

if not is (numGliders (1, 0, 0, 10) = 10)
  then error ("Error: numGliders failed sanity check.")$
/* Note: it is worrisome that this check fails.
if not is (numGliders (1, 1, 10) = 0)
  then error ("Error: numGliders failed sanity check.")$
*/

/*
  Accepts three arguments:

  * manRate, a real number that represents the rate at which gliders
    are manufactured;
  * kr, a real number that represents the rate at which
    gliders are retired or destroyed in accidents;
  * age and t, real numbers that represents a number of years

  and returns the mean age of active gliders in year t.


      (kr + ka) t
    %e           - (kr + ka) t - 1
    ------------------------------
                  (kr + ka) t
     (kr + ka) (%e           - 1)
*/


getMeanGlidersAge (manStart, manEnd, manRate, kr, ka, t)
  := block
       (assume (t > 0),
        integrate (age * getNumGlidersAge (manRate, kr, ka, age), age, minAge (manEnd, t), maxAge (manStart, t))/
        getNumGliders (manStart, manEnd, manRate, kr, ka, t));

plotMeanGliderAge (manStart, manEnd, manRate, kr, ka)
  := draw2d
       (explicit (getMeanGlidersAge (manStart, manEnd, manRate, kr, ka, t), t, manStart, manEnd),
        color = red,
        explicit (t - manStart, t, manStart, manEnd));

/*
  Accepts two arguments:
 
  * manRate, a real number that represents the rate at which gliders
    are manufactured;
  * kr, a real number that represents the rate at which
    gliders are retired or destroyed in accidents;

  and returns the average age of an active glider after an infinite
  number of years.

  Note: over time the mean age of an active glider converges to
  following value:

  While production is ongoing, this tends to:

              1
   ------------------------
   kr + ka

  once production stops, this grows linearly to infinity. This
  behavior makes sense, as the survivors continue to age linearly
  after production has ceased.
*/
getLimitMeanGlidersAge (manStart, manEnd, manRate, kr, ka)
  := block
       (assume (kr + ka > 0),
        assume (t > 0),
        assume (te > 0),
        assume (t > te),
        limit (getMeanGlidersAge (manStart, manEnd, manRate, kr, ka, t), t, inf));

/*
  The following functions complicate the reference scenario in the
  following way.

  We now assume that the manufacturer manufactures a given number
  of gliders, numManGliders, over a given time period, manYears,
  at a constant rate, manRate. At each instant, each glider has a
  given probability of being retired or destroyed in an accident
  (kr).

  In this scenario, there are now two periods: the period in which
  the manufacturer is producing the gliders, and the period after
  production has ceased.

  Publically available data gives numManGliders, manYears, the
  number of destroyed aircraft, and the ages of active gliders
  in different years. 

  We want to determine kr and destroyRate for each glider
  model to estimate the relative safety of different glider models. 

  manRate = numManGliders / manYears.

  Using public data, we can estimate the average age of gliders in each year by taking the mean of the ages of aircraft sold or mentioned in accident reports.
  
*/
*/
