/*
  This model was created to determine whether or not certain
  sailplane models are statistically safer (or less safe) than
  others.

  Certain models, such as the CA-4, have experienced very high
  loss rates in fatal accidents; whereas other models, such as
  the ASK-21s, have experienced relatively few hull losses in
  fatal accidents.

  Unfortunately, no organization appears to be maintaining an
  accurate count of the number of sailplanes in active use let
  alone the number of flight hours logged on each model.

  Instead, all we have are the flight hours accumulated by aircraft
  that have been destroyed in accidents reported to the NTSB.
*/

load (draw);
load (eigen);
load (descriptive);
load (solve_rec);

ratprint: false;

/*
  Accepts two arguments: pr and pa, the rate at which gliders are
  retired and destroyed by accidents respectively; and returns the
  operator matrix that simulates the effects of one year on a cohort
  of gliders.
*/
simMatrix (pr, pa)
  := matrix ([1 - pr - pa, 0], [pa, 1]);

/*
  Accepts two arguments: pr and pa, the rate at which gliders are
  retired and destroyed by accidents respectively; and returns the
  eigenvectors matrix associated with the simulation matrix.
*/
simMatrixEigenvecs (pr, pa)
  := matrix ([1, 0], [- pa/(pr + pa), 1]); 

/*
  Accepts two arguments: pr and pa, the rate at which gliders are
  retired and destroyed by accidents respectively; and returns the
  eigenvalues matrix associated with the simulation matrix.
*/
simMatrixEigenvals (pr, pa, n)
  := matrix ([(1 - pr - pa)^n, 0], [0, 1]);

/*
  Accepts four arguments:

  * km, the initial number of gliders in the cohort (the number of
    gliders manufactured each year)
  * pr, the probability that a glider will be retired each year
  * pa, the probability that a glider will be destroyed in an
    accident each year
  * n, a number of years

  and returns a vector of the form [numGliders, numAccidents],
  where numGliders represents the number of gliders remaining in the
  cohort and numAccidents denotes the number of gliders destroyed
  in accidents.
*/
sim (km, pr, pa, n)
  := block
       ([T, M],
        T : simMatrixEigenvecs (pr, pa),
        M : simMatrixEigenvals (pr, pa, n),
        T . M . (T ^^ -1) . columnvector ([km, 0]));

/*
  Accepts four arguments:

  * km, the initial number of gliders in the cohort (the number of
    gliders manufactured each year)
  * pr, the probability that a glider will be retired each year
  * pa, the probability that a glider will be destroyed in an
    accident each year
  * n, a number of years

  and returns the number of gliders remaining in the cohort after
  n years.
*/
cohortNumGlidersN (km, pr, pa, n)
  := sim (km, pr, pa, n)[1][1];

/*
  Accepts four arguments:

  * km, the initial number of gliders in the cohort (the number of
    gliders manufactured each year)
  * pr, the probability that a glider will be retired each year
  * pa, the probability that a glider will be destroyed in an
    accident each year
  * n, a number of years

  and returns the number of gliders destroyed by accidents after
  n years.
*/
cohortNumAccidentsN (km, pr, pa, n)
  := sim (km, pr, pa, n)[2][1];

/*
  Accepts four arguments:

  * km, the initial number of gliders in the cohort (the number of
    gliders manufactured each year)
  * kr, the rate at which gliders are retired
  * ka, the rate at which gliders are destroyed in accidents
    accident each year
  * t, a number of years

  and returns the number of gliders remaining in the cohort after
  t years.

         - (kr + ka) t
    km %e
*/
cohortNumGliders (km, kr, ka, t)
  := limit (cohortNumGlidersN (km, kr / a, ka / a, t * a), a, inf);

/*
  Accepts four arguments:

  * km, the initial number of gliders in the cohort (the number of
    gliders manufactured each year)
  * kr, the rate at which gliders are retired
  * ka, the rate at which gliders are destroyed in accidents
    accident each year
  * t, a number of years

  and returns the number of gliders destroyed in accidents after
  t years.

   ka km         - (kr + ka) t
  ------- (1 - %e             )
  kr + ka
*/
cohortNumAccidents (km, kr, ka, t)
  := limit (cohortNumAccidentsN (km, kr / a, ka / a, t * a), a, inf);

/*
  Accepts one argument: ka, an accident rate; and returns the
  equivalent probability that a glider will be destroyed by an
  accident in a given year.

  see:
    solve
      (cohortNumGlidersN (km, 0, pa, t) =
       cohortNumGliders (km, 0, ka, t), pa);
*/
accidentProb (ka)
  := 1 - %e^(- ka);

/*
  Accepts two arguments, ts and t, the year in which the manufacturer
  stopped manufacturing the given glider model and the current year
  respectively; and returns the minimum age of those gliders that
  are still in service.
*/
minAge (te, t) := max (0, t - te);

/*
  Accepts two arguments, ts and t, the year in which the manufacturer
  started manufacturing the given glider model and the current year
  respectively; and returns the maximum age of those gliders that
  are still in service.
*/
maxAge (ts, t) := max (0, t - ts);

frameShift (te, t) := max (0, t - te);

frameLen (ts, te, t) := min (te - ts, t - ts);

/*
  Accepts six arguments:

  * km, the number of gliders manufactured each year
  * ts, the year in which the manufacturer started manufacturing
    the given glider model
  * te, the year in which the manufacturer stopped manufacturing
    the given glider model
  * kr, the rate at which gliders are retired
  * ka, the rate at which gliders are destroyed in accidents
  * t, the current year

  and returns the number of gliders in year t.
*/
numGliders (km, ts, te, kr, ka, t)
  := integrate
       (cohortNumGliders (km, kr, ka, age),
        age, minAge (te, t), maxAge (ts, t));

/*
  Accepts six arguments:

  * km, the number of gliders manufactured each year
  * ts, the year in which the manufacturer started manufacturing
    the given glider model
  * te, the year in which the manufacturer stopped manufacturing
    the given glider model
  * kr, the rate at which gliders are retired
  * ka, the rate at which gliders are destroyed in accidents
  * t, the current year

  and returns the number of accidents that have occured after
  t years.
*/
numAccidents (km, ts, te, kr, ka, t)
  := integrate
       (cohortNumAccidents (km, kr, ka, age),
        age, minAge (te, t), maxAge (ts, t));

/*
  Accepts six arguments:

  * km, the number of gliders manufactured each year
  * ts, the year in which the manufacturer started manufacturing
    the given glider model
  * te, the year in which the manufacturer stopped manufacturing
    the given glider model
  * kr, the rate at which gliders are retired
  * ka, the rate at which gliders are destroyed in accidents
  * t, the current year

  and returns the mean age of the remaining gliders.
*/
meanAge (km, ts, te, kr, ka, t)
  := block
       (assume (t > 0),
        integrate (age * cohortNumGliders (km, kr, ka, age), age, minAge (te, t), maxAge (ts, t))/
        numGliders (km, ts, te, kr, ka, t));

/*
*/
plotMeanAge (km, ts, te, kr, ka)
  := draw2d
       (explicit (meanAge (km, ts, te, kr, ka, t), t, ts, te),
        color = red,
        explicit (t - ts, t, ts, te));

/*
  Accepts three arguments:
 
  * km, the number of gliders manufactured each year
  * kr, the rate a which gliders are retired
  * ka, the rate a which gliders are destroyed in accidents

  and returns the average age of an active glider after an infinite
  number of years.

  Note: over time the mean age of an active glider converges to
  following value:

  While production is ongoing, this tends to:

      1
   -------
   kr + ka

  once production stops, this grows linearly to infinity. This
  behavior makes sense, as the survivors continue to age linearly
  after production has ceased.
*/
meanAgeLim (km, kr, ka)
  := block
       (assume (kr + ka > 0),
        limit (meanAge (km, 0, t, kr, ka, t), t, inf));
